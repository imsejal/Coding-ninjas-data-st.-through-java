import java.util.Arrays;
public class Solution {

    /*	Binary Tree Node class
 * 
 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	*/

    //         public static void nodesSumToS(BinaryTreeNode<Integer> root, int sum) {
    //             // Write your code here
    //           // final  BinaryTreeNode<Integer> a =root;
    //             if(root==null)
    //                 return;
    //             if(root.data<sum)
    //             {int diff=sum-root.data;
    //             //         search for difference==========
    //             boolean findNode=isNodePresent(a,diff);
    //             if(findNode){
    //                 if(root.data<diff)
    //                     System.out.println(root.data+" "+diff);
    //                 else
    //                     System.out.println(diff+" "+root.data);   
    //             }}
    //             else{
    //                 nodesSumToS(root.left,sum);
    //                 nodesSumToS(root.right,sum);
    //             }
    //         }

    //         public static boolean isNodePresent(BinaryTreeNode<Integer> root,int x){
    //             /* Your class should be named Solution
    //     		 * Don't write main().
    //     		 * Don't read input, it is passed as function argument.
    //     		 * Return output and don't print it.
    //     	 	 * Taking input and printing output is handled automatically.
    //     		*/ 
    //             if(root==null)
    //                 return false;
    //             boolean ans=false;
    //             if(root.data.equals(x))
    //                 return true;
    //             ans=isNodePresent(root.left,x);
    //             if(ans==true)
    //                 return true;
    //             ans=isNodePresent(root.right,x);
    //             if (ans==true)
    //                 return true;
    //             return ans;}

    public static void nodesSumToS(BinaryTreeNode<Integer> root, int sum) {
        if(root==null)
            return;
        int[] arr=arrayInsertion(root);
        Arrays.sort(arr);
        int i=0;
        int j=arr.length-1;
        while(i<j){
            if(arr[i]+arr[j]==sum){
                System.out.println(arr[i]+" "+arr[j]);
                i++;
                j--;}
            else if(arr[i]+arr[j]<sum)
                i++;
            else 
                j--;

        }
    }
    private static int[] arrayInsertion(BinaryTreeNode<Integer> root){

        if(root==null){
            int[] arr=new int[0];
            return arr;}
        int firstData=root.data;

            int[] jrr= arrayInsertion(root.left);

        int[] krr= arrayInsertion(root.right);
        int[] finalArray=new int[1+jrr.length+krr.length];
        int k=0;
        finalArray[k]=firstData;
        k++;
        for(int i=0;i<jrr.length;i++)
        {  finalArray[k]=jrr[i];
         k++;
        }
        for(int i=0;i<krr.length;i++)
        {
            finalArray[k]=krr[i];
            k++;
        }
        return finalArray;

    }
   
}


//here's the code in CPP
#include <bits/stdc++.h>
void printNodesSumToS(BinaryTreeNode<int> *root, int s) {

    // Write your code here
	  // Step 1: Inorder traversal to get sorted array of nodes
    stack<BinaryTreeNode<int>*> stk;
    BinaryTreeNode<int>* node = root;
    unordered_set<int> set;

    while (node || !stk.empty()) {
        while (node) {
            stk.push(node);
            node = node->left;
        }
        node = stk.top();
        stk.pop();

        // Step 2: Check if the complementary node is already found
        int complement = s - node->data;
        if (set.find(complement) != set.end()) {
            cout << complement << " " << node->data << endl;
        }
        set.insert(node->data);

        node = node->right;
    }
}
